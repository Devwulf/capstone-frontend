{"version":3,"sources":["models/Policies.ts","utils/Configuration.ts","utils/Context.ts","components/ToggleBaseUrl.tsx","pages/LoginPage.tsx","utils/Enums.ts","utils/Helpers.ts","components/Policy.tsx","components/PolicyState.tsx","logo.svg","components/Policies.tsx","components/Searchbar.tsx","components/ToggleTeam.tsx","components/TopBar.tsx","components/VideoPlayer.tsx","pages/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Team","Configuration","localBaseUrl","serverBaseUrl","PoliciesModel","baseUrl","policies","this","token","a","team","Blue","state","actions","url","axios","get","headers","data","forEach","policy","push","action","TeamContext","React","createContext","setTeam","addListener","name","listener","removeListener","PolicyContext","choosePolicy","AccuracyContext","setAccuracy","accuracy","SearchContext","searchStr","setSearchStr","searchAction","addActionListener","removeActionListener","AuthContext","setToken","BaseUrlContext","setBaseUrl","ToggleBaseUrl","props","Consumer","className","htmlFor","icons","checked","onChange","event","target","Component","LoginPageInner","username","password","isRegister","onDemoClick","bind","onRegister","onLogin","setState","baseUrlContext","post","res","status","alert","response","authContext","auth","value","type","onClick","LoginPage","useContext","Action","setStateAsync","component","Promise","resolve","Policy","isSelected","isDisabled","showState","showAction","showProbability","showQValue","showGoldAdv","probability","toFixed","qValue","goldAdv","disabled","PolicyState","selectedAction","allSchemas","length","isNaN","Number","schema","undefined","style","marginBottom","autoHide","autoHideTimeout","width","map","index","contextType","PoliciesInner","currentPolicies","bestPolicies","nextPolicies","pastPolicies","isLoading","correctCount","onTeamChanged","onBaseUrlChanged","resetPolicies","onChoosePolicy","teamContext","retrieveStartPolicies","clearPolicies","accuracyContext","addPolicy","bestSchemas","getSchema","currentSchemas","count","policiesArr","concat","currentState","retrieveBestPolicies","retrieveNextPolicies","nextSchemas","slice","nextState","Provider","src","logo","alt","Policies","Searchbar","placeholder","onSubmit","ToggleTeam","Red","TopBar","onAccuracyChanged","context","VideoPlayer","WIDTH","HEIGHT","embedId","isIdValid","getEmbedId","regex","match","substring","height","frameBorder","allow","allowFullScreen","title","MainPage","teamListeners","accuracyListeners","searchListeners","addTeamListener","removeTeamListener","addAccuracyListener","removeAccuracyListener","addSearchActionListener","removeSearchActionListener","all","fn","filter","App","baseUrlListeners","addBaseUrlListener","removeBaseUrlListener","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62d75a74.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { PolicySchema } from \"./Policy\";\n\nexport enum Team {\n    Blue,\n    Red\n}\n\nexport interface IPoliciesModel {\n    retrieveBestPolicies(token: string, team?: Team, state?: number, actions?: string): Promise<void>;\n    retrieveNextPolicies(token: string, team?: Team, state?: number, action?: string): Promise<void>;\n    retrieveStartPolicies(token: string, team?: Team): Promise<void>;\n    addPolicy(policy: PolicySchema): void;\n    clearPolicies(): void;\n    getSchema(): PoliciesSchema;\n}\n\nexport class PoliciesModel implements IPoliciesModel {\n    private baseUrl: string;\n    private policies: PoliciesSchema;\n\n    constructor(baseUrl: string, policies: PoliciesSchema = { policies: [] }) {\n        this.baseUrl = baseUrl;\n        this.policies = policies;\n    }\n\n    async retrieveBestPolicies(token: string, team: Team = Team.Blue, state = 0, actions = \"bKills\"): Promise<void> {\n        // Get policies from backend\n        const policies: PolicySchema[] = [];\n        const url = `${this.baseUrl}/api/policy/best?team=${Team[team]}&state=${state}&actions=${actions}`;\n        const res = await axios.get<PoliciesSchema>(url, {\n            headers: {\n                \"X-Access-Tokens\": token\n            }\n        });\n        res.data.policies.forEach(policy => {\n            policies.push(policy);\n        });\n\n        this.policies.policies = policies;\n    }\n\n    async retrieveNextPolicies(token: string, team: Team = Team.Blue, state = 0, action = \"bKills\"): Promise<void> {\n        // Get policies from backend\n        const policies: PolicySchema[] = [];\n        const url = `${this.baseUrl}/api/policy/next?team=${Team[team]}&state=${state}&action=${action}`;\n        const res = await axios.get<PoliciesSchema>(url, {\n            headers: {\n                \"X-Access-Tokens\": token\n            }\n        });\n        res.data.policies.forEach(policy => {\n            policies.push(policy);\n        });\n\n        this.policies.policies = policies;\n    }\n\n    async retrieveStartPolicies(token: string, team: Team = Team.Blue): Promise<void> {\n        // Get policies from backend\n        const policies: PolicySchema[] = [];\n        const url = `${this.baseUrl}/api/policy/start?team=${Team[team]}`;\n        const res = await axios.get<PoliciesSchema>(url, {\n            headers: {\n                \"X-Access-Tokens\": token\n            }\n        });\n        res.data.policies.forEach(policy => {\n            policies.push(policy);\n        });\n\n        this.policies.policies = policies;\n    }\n\n    addPolicy(policy: PolicySchema): void {\n        // TODO: Validate policy\n        this.policies.policies.push(policy);\n    }\n\n    clearPolicies(): void {\n        this.policies.policies = [];\n    }\n\n    getSchema(): PoliciesSchema {\n        return this.policies;\n    }\n}\n\nexport class DummyPoliciesModel implements IPoliciesModel {\n    private policies: PoliciesSchema;\n\n    constructor(policies: PoliciesSchema = { policies: [] }) {\n        this.policies = policies;\n    }\n\n    async retrieveBestPolicies(token: string, team: Team = Team.Blue, state = 0, actions = \"bKills\"): Promise<void> {\n        const bluePolicySchemas: PolicySchema[] = [\n            {state: state, action: actions, probability: 1, qValue: 0, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rKills\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 2, action: \"bMID_OUTER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 3, action: \"bMID_INNER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 4, action: \"bMID_BASE_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 5, action: \"bMID_INHIBITOR\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 6, action: \"bMID_NEXUS_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 7, action: \"bMID_NEXUS_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 8, action: \"bWon\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n        ];\n\n        const redPolicySchemas: PolicySchema[] = [\n            {state: state, action: actions, probability: 1, qValue: 0, goldAdv: \"Even\"},\n            {state: state + 1, action: \"bKills\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 2, action: \"rMID_OUTER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 3, action: \"rMID_INNER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 4, action: \"rMID_BASE_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 5, action: \"rMID_INHIBITOR\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 6, action: \"rMID_NEXUS_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 7, action: \"rMID_NEXUS_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 8, action: \"rWon\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n        ];\n        \n        this.policies.policies = team === Team.Blue ? bluePolicySchemas : redPolicySchemas;\n    }\n\n    async retrieveNextPolicies(token: string, team: Team = Team.Blue, state = 0, action = \"bKills\"): Promise<void> {\n        const bluePolicySchemas: PolicySchema[] = [\n            {state: state + 1, action: \"bKills\", probability: 1, qValue: 0, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rKills\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"bMID_OUTER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"bMID_INNER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"bMID_BASE_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"bMID_INHIBITOR\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"bMID_NEXUS_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n        ];\n\n        const redPolicySchemas: PolicySchema[] = [\n            {state: state + 1, action: \"bKills\", probability: 1, qValue: 0, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rKills\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rMID_OUTER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rMID_INNER_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rMID_BASE_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rMID_INHIBITOR\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n            {state: state + 1, action: \"rMID_NEXUS_TURRET\", probability: Math.random(), qValue: Math.random() * 100, goldAdv: \"Even\"},\n        ];\n        \n        this.policies.policies = team === Team.Blue ? bluePolicySchemas : redPolicySchemas;\n    }\n\n    async retrieveStartPolicies(token: string, team: Team = Team.Blue): Promise<void> {\n        const policySchemas: PolicySchema[] = [\n            {state: 0, action: \"rKills\", probability: Math.random(), qValue: 0, goldAdv: \"Even\"},\n            {state: 0, action: \"bKills\", probability: Math.random(), qValue: 0, goldAdv: \"Even\"},\n            {state: 0, action: \"rTOP_OUTER_TURRET\", probability: Math.random(), qValue: 0, goldAdv: \"Even\"},\n            {state: 0, action: \"bBOT_OUTER_TURRET\", probability: Math.random(), qValue: 0, goldAdv: \"Even\"},\n            {state: 0, action: \"bDRAGON\", probability: Math.random(), qValue: 0, goldAdv: \"Even\"},\n            {state: 0, action: \"rBOT_OUTER_TURRET\", probability: Math.random(), qValue: 0, goldAdv: \"Even\"},\n            {state: 0, action: \"bTOP_OUTER_TURRET\", probability: Math.random(), qValue: 0, goldAdv: \"Even\"},\n        ];\n        \n        this.policies.policies = policySchemas;\n    }\n\n    addPolicy(policy: PolicySchema): void {\n        // TODO: Validate policy\n        this.policies.policies.push(policy);\n    }\n\n    clearPolicies(): void {\n        this.policies.policies = [];\n    }\n\n    getSchema(): PoliciesSchema {\n        return this.policies;\n    }\n}\n\nexport type PoliciesSchema = {\n    policies: PolicySchema[];\n}","export default class Configuration {\n    public static readonly localBaseUrl: string = \"http://localhost:5000\";\n    public static readonly serverBaseUrl: string = \"https://www.devwulfcodes.com\";\n}","import React from \"react\";\nimport { Team } from \"../models/Policies\";\nimport { PolicySchema } from \"../models/Policy\";\n\nexport type TeamContextType = {\n    team: Team;\n    setTeam: (team: Team) => void;\n    addListener: (name: string, listener: (team: Team) => Promise<void>) => void;\n    removeListener: (name: string) => void;\n};\n\nexport const TeamContext = React.createContext<TeamContextType>({\n    team: Team.Blue,\n    setTeam: team => { return; },\n    addListener: (name, listener) => { return; },\n    removeListener: (name) => { return; }\n});\n\nexport type PolicyContextType = {\n    choosePolicy: (team: Team, policy: PolicySchema) => Promise<void>;\n}\n\nexport const PolicyContext = React.createContext<PolicyContextType>({\n    choosePolicy: async (team, policy) => { return; }\n});\n\nexport type AccuracyContextType = {\n    setAccuracy: (accuracy: number) => Promise<void>;\n    addListener: (name: string, listener: (accuracy: number) => Promise<void>) => void;\n    removeListener: (name: string) => void;\n}\n\nexport const AccuracyContext = React.createContext<AccuracyContextType>({\n    setAccuracy: async accuracy => { return; },\n    addListener: (name, listener) => { return; },\n    removeListener: (name) => { return; }\n});\n\nexport type SearchContextType = {\n    searchStr: string;\n    setSearchStr: (searchStr: string) => void;\n    searchAction: () => Promise<void>;\n    addActionListener: (name: string, listener: (searchStr: string) => Promise<void>) => void;\n    removeActionListener: (name: string) => void;\n}\n\nexport const SearchContext = React.createContext<SearchContextType>({\n    searchStr: \"\",\n    setSearchStr: searchStr => { return; },\n    searchAction: async () => { return; },\n    addActionListener: (name, listener) => { return; },\n    removeActionListener: (name) => { return; }\n});\n\nexport type AuthContextType = {\n    token: string;\n    setToken: (token: string) => void;\n}\n\nexport const AuthContext = React.createContext<AuthContextType>({\n    token: \"\",\n    setToken: token => { return; }\n});\n\nexport type BaseUrlContextType = {\n    baseUrl: string;\n    setBaseUrl: (baseUrl: string) => void;\n    addListener: (name: string, listener: (baseUrl: string) => Promise<void>) => void;\n    removeListener: (name: string) => void;\n}\n\nexport const BaseUrlContext = React.createContext<BaseUrlContextType>({\n    baseUrl: \"\",\n    setBaseUrl: baseUrl => { return; },\n    addListener: (name, listener) => { return; },\n    removeListener: (name) => { return; }\n});","import React from \"react\";\nimport Toggle from \"react-toggle\";\nimport { Team } from \"../models/Policies\";\nimport Configuration from \"../utils/Configuration\";\nimport { BaseUrlContext, TeamContext } from \"../utils/Context\";\n\ntype ToggleBaseUrlProps = {\n\n}\n\ntype ToggleBaseUrlState = {\n    \n}\n\nexport default class ToggleBaseUrl extends React.Component<ToggleBaseUrlProps, ToggleBaseUrlState> {\n    constructor(props: ToggleBaseUrlProps) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    render(): JSX.Element {\n        return (\n            <BaseUrlContext.Consumer>\n                {({baseUrl, setBaseUrl}) => (\n                    <div className=\"flex items-center\">\n                        <label htmlFor=\"\" className=\"flex items-center\">\n                            <span className=\"text-sm font-bold mr-2 text-gray-900\">Local</span>\n                            <Toggle className=\"mr-2\"\n                                icons={false}\n                                checked={baseUrl === Configuration.serverBaseUrl ? true : false}\n                                onChange={event => {\n                                    const url = event.target.checked ? \n                                        Configuration.serverBaseUrl : Configuration.localBaseUrl;\n                                    setBaseUrl(url);\n                                }} />\n                            <span className=\"text-sm font-bold text-gray-900\">Server</span>\n                        </label>\n                    </div>\n                )}\n            </BaseUrlContext.Consumer>\n        );\n    }\n}","import axios from \"axios\";\nimport React, { useContext } from \"react\";\nimport ToggleBaseUrl from \"../components/ToggleBaseUrl\";\nimport { AuthContext, AuthContextType, BaseUrlContext, BaseUrlContextType } from \"../utils/Context\";\n\ntype LoginPageProps = {\n    authContext: AuthContextType;\n    baseUrlContext: BaseUrlContextType;\n}\n\ntype LoginPageState = {\n    username: string;\n    password: string;\n    isRegister: boolean;\n}\n\nexport class LoginPageInner extends React.Component<LoginPageProps, LoginPageState> {\n    constructor(props: LoginPageProps) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            isRegister: false\n        };\n\n        this.onDemoClick = this.onDemoClick.bind(this);\n        this.onRegister = this.onRegister.bind(this);\n        this.onLogin = this.onLogin.bind(this);\n    }\n\n    onDemoClick(): void {\n        const demoUsername = \"test\";\n        const demoPassword = \"test123\";\n        this.setState({username: demoUsername, password: demoPassword});\n    }\n\n    async onRegister(): Promise<void> {\n        const { baseUrlContext } = this.props;\n        const { username, password } = this.state;\n\n        try {\n            const res = await axios.post(`${baseUrlContext.baseUrl}/auth/register`, {\n                username: username,\n                password: password\n            });\n    \n            if (res.status === 200)\n                alert(res.data[\"message\"]);\n        } catch(err) {\n            alert(`${err.response.status}: ${err.response.data}`);\n        }\n    }\n\n    async onLogin(): Promise<void> {\n        const { authContext, baseUrlContext } = this.props;\n        const { username, password } = this.state;\n        \n        try {\n            const res = await axios.post(`${baseUrlContext.baseUrl}/auth/login`, {}, {\n                auth: {\n                    username: username,\n                    password: password\n                }\n            });\n            if (res.status === 200)\n                authContext.setToken(res.data[\"token\"]);\n        } catch (err) {\n            alert(`${err.response.status}: ${err.response.data}`);\n        }\n    }\n\n    render(): JSX.Element {\n        const { username, password, isRegister } = this.state;\n\n        return (\n            <div className=\"flex justify-center items-center w-screen h-screen\">\n                {(!isRegister && \n                    <div className=\"flex flex-col p-4 rounded-lg bg-indigo-200 text-indigo-900\">\n                        <div className=\"flex flex-row justify-between items-center mb-4\">\n                            <span className=\"text-2xl font-bold\">Login</span>\n                            <ToggleBaseUrl />\n                        </div>\n                        <div className=\"flex flex-col mb-2\">\n                            <label className=\"text-xs mb-1\" htmlFor=\"\">Username</label>\n                            <input className=\"px-2 py-1 rounded-default text-sm\" \n                                value={username}\n                                onChange={event => this.setState({username: event.target.value})} />\n                        </div>\n                        <div className=\"flex flex-col mb-4\">\n                            <label className=\"text-xs mb-1\" htmlFor=\"\">Password</label>\n                            <input className=\"px-2 py-1 rounded-default text-sm\" \n                                value={password} \n                                type=\"password\"\n                                onChange={event => this.setState({password: event.target.value})} />\n                        </div>\n\n                        <div className=\"flex justify-between\">\n                            <button className=\"px-4 py-1 mr-2 rounded-default text-xs bg-indigo-400 text-indigo-100\"\n                                onClick={() => this.setState({isRegister: true})}>Register</button>\n                            <button className=\"px-4 py-1 mr-2 rounded-default text-xs bg-indigo-700 text-indigo-200\"\n                                onClick={this.onLogin}>Login</button>\n                            <button className=\"px-4 py-1 rounded-default text-xs bg-indigo-400 text-indigo-100\"\n                                onClick={this.onDemoClick}>\n                                    Demo\n                            </button>\n                        </div>\n                    </div>\n                ) || \n                (isRegister && \n                    <div className=\"flex flex-col p-4 rounded-lg bg-indigo-200 text-indigo-900\">\n                        <div className=\"flex flex-row justify-between items-center mb-4\">\n                            <span className=\"text-2xl font-bold\">Register</span>\n                            <ToggleBaseUrl />\n                        </div>\n                        <div className=\"flex flex-col mb-2\">\n                            <label className=\"text-xs mb-1\" htmlFor=\"\">Username</label>\n                            <input className=\"px-2 py-1 rounded-default text-sm\" \n                                value={username}\n                                onChange={event => this.setState({username: event.target.value})} />\n                        </div>\n                        <div className=\"flex flex-col mb-4\">\n                            <label className=\"text-xs mb-1\" htmlFor=\"\">Password</label>\n                            <input className=\"px-2 py-1 rounded-default text-sm\" \n                                value={password} \n                                type=\"password\"\n                                onChange={event => this.setState({password: event.target.value})} />\n                        </div>\n\n                        <div className=\"flex justify-between\">\n                            <button className=\"px-4 py-1 mr-2 rounded-default text-xs bg-indigo-700 text-indigo-200\"\n                                onClick={this.onRegister}>Register</button>\n                            <button className=\"px-4 py-1 mr-2 rounded-default text-xs bg-indigo-400 text-indigo-100\"\n                                onClick={() => this.setState({isRegister: false})}>\n                                    Login\n                            </button>\n                            <button className=\"px-4 py-1 rounded-default text-xs bg-indigo-400 text-indigo-100\"\n                                onClick={this.onDemoClick}>\n                                    Demo\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default function LoginPage(): JSX.Element {\n    const auth = useContext(AuthContext);\n    const baseUrl = useContext(BaseUrlContext);\n\n    return (\n        <LoginPageInner authContext={auth} baseUrlContext={baseUrl} />\n    );\n}","export enum Action {\n    bKills,\n    bTOP_OUTER_TURRET,\n    bTOP_INNER_TURRET,\n    bTOP_BASE_TURRET,\n    bTOP_INHIBITOR,\n    bMID_OUTER_TURRET,\n    bMID_INNER_TURRET,\n    bMID_BASE_TURRET,\n    bMID_INHIBITOR,\n    bMID_NEXUS_TURRET,\n    bBOT_OUTER_TURRET,\n    bBOT_INNER_TURRET,\n    bBOT_BASE_TURRET,\n    bBOT_INHIBITOR,\n    bDRAGON,\n    bELDER_DRAGON,\n    bRIFT_HERALD,\n    bBARON_NASHOR,\n    bWon,\n    rKills,\n    rTOP_OUTER_TURRET,\n    rTOP_INNER_TURRET,\n    rTOP_BASE_TURRET,\n    rTOP_INHIBITOR,\n    rMID_OUTER_TURRET,\n    rMID_INNER_TURRET,\n    rMID_BASE_TURRET,\n    rMID_INHIBITOR,\n    rMID_NEXUS_TURRET,\n    rBOT_OUTER_TURRET,\n    rBOT_INNER_TURRET,\n    rBOT_BASE_TURRET,\n    rBOT_INHIBITOR,\n    rDRAGON,\n    rELDER_DRAGON,\n    rRIFT_HERALD,\n    rBARON_NASHOR,\n    rWon\n}","import React from \"react\";\n\nexport async function setStateAsync<P, S, K extends keyof S>(\n    state:\n        ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) |\n        Pick<S, K> |\n        S |\n        null,\n    component: React.Component<P, S>\n): Promise<unknown> {\n    return new Promise(resolve => component.setState(state, () => resolve(null)));\n}","import React from \"react\";\nimport { Team } from \"../models/Policies\";\nimport { PolicySchema } from \"../models/Policy\";\nimport { PolicyContext, TeamContext } from \"../utils/Context\";\n\ntype PolicyProps = {\n    policy: PolicySchema;\n    isSelected?: boolean;\n    isDisabled?: boolean;\n    showState?: boolean;\n    showAction?: boolean;\n    showProbability?: boolean;\n    showQValue?: boolean;\n    showGoldAdv?: boolean;\n}\n\ntype PolicyState = {\n\n}\n\nexport default class Policy extends React.Component<PolicyProps, PolicyState> {\n    constructor(props: PolicyProps) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n\n    render(): JSX.Element {\n        const { policy, isSelected = false, isDisabled = false, showState = false, showAction = false, showProbability = false, showQValue = false, showGoldAdv = false } = this.props;\n        const probability = policy.probability < 0 ? \"-\" : `${(policy.probability * 100).toFixed(2)}%`;\n        const qValue = policy.qValue < 0 ? \"-\" : `${policy.qValue.toFixed(2)}`;\n        const goldAdv = policy.goldAdv === \"\" ? \"-\" : policy.goldAdv;\n        return (\n            <TeamContext.Consumer>\n                {({team}) => (\n                    <PolicyContext.Consumer>\n                        {({choosePolicy}) => (\n                            <button className={`flex flex-col items-center w-full ${isSelected ? (team === Team.Blue ? \"bg-blue-600 text-blue-200\" : \"bg-red-600 text-red-200\") : \"\"} ${isDisabled ? \"opacity-50 cursor-default\" : \"\"}`}\n                                onClick={() => choosePolicy(team, policy)}\n                                disabled={isDisabled}>\n                                <span className={`${showState ? \"\" : \"hidden\"}`}>{policy.state}</span>\n                                <span className={`${showAction ? \"text-sm\" : \"hidden\"}`}>{policy.action}</span>\n                                <div className=\"flex flex-row\">\n                                    <div className={`${showProbability ? \"flex flex-col mr-4\" : \"hidden\"}`}>\n                                        <span className=\"text-xs\">Probability</span>\n                                        <span className=\"text-sm\">{probability}</span>\n                                    </div>\n                                    <div className={`${showQValue ? \"flex flex-col mr-4\" : \"hidden\"}`}>\n                                        <span className=\"text-xs\">Q-Value</span>\n                                        <span className=\"text-sm\">{qValue}</span>\n                                    </div>\n                                    <div className={`${showGoldAdv ? \"flex flex-col\" : \"hidden\"}`}>\n                                        <span className=\"text-xs\">Gold Adv</span>\n                                        <span className=\"text-sm\">{goldAdv}</span>\n                                    </div>\n                                </div>\n                            </button>\n                        )}\n                    </PolicyContext.Consumer>\n                )}\n            </TeamContext.Consumer>\n        );\n    }\n}","import React from \"react\";\nimport Scrollbars from \"react-custom-scrollbars-2\";\nimport { Team } from \"../models/Policies\";\nimport { PolicySchema } from \"../models/Policy\";\nimport { PolicyContext, TeamContext } from \"../utils/Context\";\nimport { Action } from \"../utils/Enums\";\nimport Policy from \"./Policy\";\nimport { Scrollbar } from \"./Scrollbar\";\n\ntype PolicyStateProps = {\n    state: number;\n    selectedAction?: PolicySchema;\n    actions?: PolicySchema[];\n    isDisabled?: boolean;\n}\n\ntype PolicyStateState = {\n    \n}\n\nexport default class PolicyState extends React.Component<PolicyStateProps, PolicyStateState> {\n    static contextType = PolicyContext;\n    constructor(props: PolicyStateProps) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    render(): JSX.Element {\n        const { state, selectedAction, actions = [], isDisabled = false } = this.props;\n        const allSchemas: PolicySchema[] = actions;\n        if (actions.length <= 0) {\n            for (const value in Action) {\n                if (!isNaN(Number(value)))\n                    continue;\n                \n                const schema: PolicySchema = \n                    selectedAction !== undefined && selectedAction.action === value ? \n                        selectedAction : \n                        { state: state, action: value, probability: -1, qValue: -1, goldAdv: \"\" };\n                allSchemas.push(schema);\n            }\n        }\n\n        return (\n            <TeamContext.Consumer>\n                {({team}) => (\n                    <div className=\"flex flex-col w-64 h-full p-4\">\n                        <div className={`flex flex-col items-center justify-center mb-2 h-12 ${team === Team.Blue ? \"text-blue-900\" : \"text-red-900\"}`}>\n                            <span className=\"text-xs\" style={{marginBottom: \"-0.5rem\"}}>Action</span>\n                            <span className=\"text-2xl font-medium\">{state + 1}</span>\n                        </div>\n                        <div className={`flex flex-col h-full py-4 border-2 shadow-lg rounded-lg bg-gray-100 ${team === Team.Blue ? \"border-blue-800\" : \"border-red-800\"}`}>\n                            <Scrollbars autoHide autoHideTimeout={250} style={{width: \"100%\"}}>\n                                {allSchemas.map((value, index) => (\n                                    <div key={index} className={`${index === allSchemas.length - 1 ? \"\" : \"mb-2\"}`}>\n                                        <Policy policy={value} \n                                            isSelected={selectedAction !== undefined && value.action === selectedAction.action} \n                                            isDisabled={isDisabled}\n                                            showAction \n                                            showProbability \n                                            showQValue \n                                            showGoldAdv />\n                                    </div>\n                                ))}\n                            </Scrollbars>\n                        </div>\n                    </div>\n                )}\n            </TeamContext.Consumer>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useContext } from \"react\";\nimport Scrollbars from \"react-custom-scrollbars-2\";\nimport { DummyPoliciesModel, IPoliciesModel, PoliciesModel, PoliciesSchema, Team } from \"../models/Policies\";\nimport { PolicyModel, PolicySchema } from \"../models/Policy\";\nimport { AccuracyContext, AccuracyContextType, AuthContext, AuthContextType, BaseUrlContext, BaseUrlContextType, PolicyContext, TeamContext, TeamContextType } from \"../utils/Context\";\nimport { Action } from \"../utils/Enums\";\nimport { setStateAsync } from \"../utils/Helpers\";\nimport Policy from \"./Policy\";\nimport PolicyState from \"./PolicyState\";\nimport logo from \"../logo.svg\";\n\ntype PoliciesProps = {\n    teamContext: TeamContextType;\n    accuracyContext: AccuracyContextType;\n    authContext: AuthContextType;\n    baseUrlContext: BaseUrlContextType;\n}\n\ntype PoliciesState = {\n    currentPolicies: IPoliciesModel;\n    bestPolicies: IPoliciesModel;\n    nextPolicies: IPoliciesModel;\n    pastPolicies: PoliciesSchema[];\n    isLoading: boolean;\n    correctCount: number;\n}\n\nclass PoliciesInner extends React.Component<PoliciesProps, PoliciesState> {\n    constructor(props: PoliciesProps) {\n        super(props);\n\n        const baseUrl = props.baseUrlContext.baseUrl;\n        this.state = {\n            currentPolicies: new PoliciesModel(baseUrl),\n            bestPolicies: new PoliciesModel(baseUrl),\n            nextPolicies: new PoliciesModel(baseUrl),\n            pastPolicies: [],\n            isLoading: true,\n            correctCount: 0\n        };\n\n        this.onTeamChanged = this.onTeamChanged.bind(this);\n        this.onBaseUrlChanged = this.onBaseUrlChanged.bind(this);\n        this.resetPolicies = this.resetPolicies.bind(this);\n        this.onChoosePolicy = this.onChoosePolicy.bind(this);\n    }\n\n    async componentDidMount(): Promise<void> {\n        const { teamContext, baseUrlContext } = this.props;\n\n        teamContext.addListener(\"policies\", this.onTeamChanged);\n        baseUrlContext.addListener(\"policies\", this.onBaseUrlChanged);\n\n        await this.state.nextPolicies.retrieveStartPolicies(this.props.authContext.token);\n        await setStateAsync({isLoading: false}, this);\n    }\n\n    async onTeamChanged(team: Team): Promise<void> {\n        await this.resetPolicies();\n    }\n\n    async onBaseUrlChanged(baseUrl: string): Promise<void> {\n        await this.resetPolicies();\n    }\n\n    async resetPolicies(): Promise<void> {\n        await setStateAsync({isLoading: true, pastPolicies: []}, this);\n        await this.state.currentPolicies.clearPolicies();\n        await this.state.bestPolicies.clearPolicies();\n        await this.state.nextPolicies.retrieveStartPolicies(this.props.authContext.token);\n        await this.props.accuracyContext.setAccuracy(0);\n        await setStateAsync({isLoading: false}, this);\n    }\n\n    async onChoosePolicy(team: Team, policy: PolicySchema): Promise<void> {\n        const { accuracyContext, authContext } = this.props;\n        const { pastPolicies, currentPolicies, bestPolicies, nextPolicies, correctCount } = this.state;\n\n        currentPolicies.addPolicy(policy);\n\n        const bestSchemas = bestPolicies.getSchema().policies;\n        const currentSchemas = currentPolicies.getSchema().policies;\n\n        // For counting how many times the best policy got a right prediction\n        let count = correctCount;\n        if (bestSchemas.length > 1 && policy.action === bestSchemas[1].action)\n            count++;\n\n        if (currentSchemas.length > 1)\n            accuracyContext.setAccuracy(count / (currentSchemas.length - 1));\n\n        const policiesArr = pastPolicies.concat({policies: nextPolicies.getSchema().policies});\n        await setStateAsync({isLoading: true, pastPolicies: policiesArr, correctCount: count}, this);\n\n        const currentState = currentSchemas.length - 1;\n        if (currentState >= 0) {\n            await bestPolicies.retrieveBestPolicies(authContext.token, team, currentState, policy.action);\n            await nextPolicies.retrieveNextPolicies(authContext.token, team, currentState, policy.action);\n        }\n\n        await setStateAsync({isLoading: false}, this);\n    }\n\n    componentWillUnmount(): void {\n        const { teamContext, baseUrlContext } = this.props;\n        teamContext.removeListener(\"policies\");\n        baseUrlContext.removeListener(\"policies\");\n    }\n\n    render(): JSX.Element {\n        const { pastPolicies, currentPolicies, bestPolicies, nextPolicies, isLoading } = this.state;\n        const currentSchemas = currentPolicies.getSchema().policies;\n        const bestSchemas = bestPolicies.getSchema().policies;\n        const nextSchemas = nextPolicies.getSchema().policies;\n        const allSchemas = [];\n        allSchemas.push(...currentSchemas);\n        allSchemas.push(...bestSchemas.slice(1));\n\n        let nextState = 0;\n        if (nextSchemas.length > 0)\n            nextState = nextSchemas[0].state;\n        \n        return (\n            <PolicyContext.Provider value={{choosePolicy: this.onChoosePolicy}}>\n                <div className=\"w-full h-full relative\">\n                    {(isLoading && \n                        <div className=\"absolute top-0 right-0 bottom-0 left-0 flex flex-col items-center justify-center backdrop-filter backdrop-blur-sm z-10\">\n                            <div className=\"p-4 bg-gray-800 rounded-md\">\n                                <img src={logo} alt=\"logo\" className=\"App-logo\" />\n                                <span className=\"text-2xl text-blue-200\">Loading</span>\n                            </div>\n                        </div>\n                    )}\n                    <Scrollbars autoHide autoHideTimeout={250}>\n                        <div className=\"flex flex-row h-full\">\n                            {(currentSchemas.length <= 0 &&\n                                <PolicyState state={0} actions={nextSchemas} />\n                            ) ||\n                            (currentSchemas.length > 0 && \n                                <>\n                                    {allSchemas.map((policy, index) => (\n                                        <div key={index} className=\"\">\n                                            {(policy.state === nextState && \n                                                <PolicyState state={policy.state} selectedAction={policy} actions={nextSchemas} />\n                                            ) ||\n                                            (policy.state !== nextState && index < pastPolicies.length &&\n                                                <PolicyState state={policy.state} selectedAction={policy} actions={pastPolicies[index].policies} isDisabled />\n                                            ) ||\n                                            (policy.state !== nextState && index >= pastPolicies.length &&\n                                                <PolicyState state={policy.state} selectedAction={policy} isDisabled />\n                                            )}\n                                        </div>\n                                    ))}\n                                </>\n                            )}\n                        </div>\n                    </Scrollbars>\n                </div>\n            </PolicyContext.Provider>  \n        );\n    }\n}\n\nexport default function Policies(): JSX.Element {\n    const team = useContext(TeamContext);\n    const accuracy = useContext(AccuracyContext);\n    const auth = useContext(AuthContext);\n    const baseUrl = useContext(BaseUrlContext);\n\n    return (\n        <PoliciesInner teamContext={team} accuracyContext={accuracy} authContext={auth} baseUrlContext={baseUrl} />\n    );\n}","import React from \"react\";\nimport { Team } from \"../models/Policies\";\nimport { SearchContext, TeamContext } from \"../utils/Context\";\n\ntype SearchbarProps = {\n\n}\n\ntype SearchbarState = {\n\n}\n\nexport default class Searchbar extends React.Component<SearchbarProps, SearchbarState> {\n    constructor(props: SearchbarProps) {\n        super(props);\n\n        this.state = {\n\n        };\n    }\n\n    render(): JSX.Element {\n        const demoLink = \"https://youtu.be/kTewx3x6Dps\";\n\n        return (\n            <TeamContext.Consumer>\n                {({ team }) => (\n                    <SearchContext.Consumer>\n                        {({ searchStr, setSearchStr, searchAction }) => (\n                            <div className=\"flex w-full px-4 py-2 max-w-3xl\">\n                                <input \n                                    className=\"w-full mr-2 rounded-default shadow-inner px-2 text-sm\" \n                                    placeholder=\"Type in Youtube link here...\"\n                                    value={searchStr}\n                                    onChange={event => setSearchStr(event.target.value)}\n                                    onSubmit={() => searchAction()} />\n                                <button className={`px-4 mr-2 rounded-default text-sm ${team === Team.Blue ? \"bg-blue-500 text-blue-200\" : \"bg-red-500 bg- text-red-200\"}`}\n                                    onClick={() => searchAction()}>\n                                    Search\n                                </button>\n                                <button className={`px-4 rounded-default text-sm ${team === Team.Blue ? \"bg-blue-500 text-blue-200\" : \"bg-red-500 bg- text-red-200\"}`}\n                                    onClick={() => setSearchStr(demoLink)}>\n                                    Demo\n                                </button>\n                            </div>\n                        )}\n                    </SearchContext.Consumer>\n                )}\n            </TeamContext.Consumer>\n        );\n    }\n}","import React from \"react\";\nimport Toggle from \"react-toggle\";\nimport { Team } from \"../models/Policies\";\nimport { TeamContext } from \"../utils/Context\";\n\ntype ToggleTeamProps = {\n\n}\n\ntype ToggleTeamState = {\n    \n}\n\nexport default class ToggleTeam extends React.Component<ToggleTeamProps, ToggleTeamState> {\n    constructor(props: ToggleTeamProps) {\n        super(props);\n\n        this.state = {\n            \n        };\n    }\n\n    render(): JSX.Element {\n        return (\n            <TeamContext.Consumer>\n                {({team, setTeam}) => (\n                    <div className=\"flex items-center\">\n                        <label htmlFor=\"\" className=\"flex items-center\">\n                            <span className={`text-lg font-bold mr-2 ${team === Team.Blue ? \"text-blue-900\" : \"text-red-900\"}`}>Team</span>\n                            <Toggle \n                                icons={false}\n                                onChange={event => {\n                                    const team = event.target.checked ? \n                                        Team.Red : Team.Blue;\n                                    setTeam(team);\n                                }} />\n                        </label>\n                    </div>\n                )}\n            </TeamContext.Consumer>\n        );\n    }\n}","import React from \"react\";\nimport { AccuracyContext } from \"../utils/Context\";\nimport Searchbar from \"./Searchbar\";\nimport ToggleBaseUrl from \"./ToggleBaseUrl\";\nimport ToggleTeam from \"./ToggleTeam\";\n\ntype TopBarProps = {\n\n}\n\ntype TopBarState = {\n    accuracy: number;\n}\n\nexport default class TopBar extends React.Component<TopBarProps, TopBarState> {\n    static contextType = AccuracyContext;\n    constructor(props: TopBarProps) {\n        super(props);\n\n        this.state = {\n            accuracy: 0\n        };\n\n        this.onAccuracyChanged = this.onAccuracyChanged.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.context.addListener(\"topBar\", this.onAccuracyChanged);\n    }\n\n    async onAccuracyChanged(accuracy: number): Promise<void> {\n        this.setState({accuracy: accuracy});\n    }\n\n    componentWillUnmount(): void {\n        this.context.removeListener(\"topBar\");\n    }\n\n    render(): JSX.Element {\n        const { accuracy } = this.state;\n        return (\n            <div className=\"flex justify-between w-screen h-20 p-4\">\n                <div className=\"flex flex-row\">\n                    <div className=\"flex items-center mr-4\">\n                        <ToggleTeam />\n                    </div>\n                    <ToggleBaseUrl />\n                </div>\n                <Searchbar />\n                <div className=\"flex flex-col items-end justify-center w-40\">\n                    <span className=\"text-sm\">Model Accuracy:</span>\n                    <span className=\"text-sm font-bold\">{(accuracy * 100).toFixed(2)}%</span>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { SearchContext } from \"../utils/Context\";\n\ntype VideoPlayerProps = {\n\n}\n\ntype VideoPlayerState = {\n    embedId: string;\n    isIdValid: boolean;\n}\n\nexport default class VideoPlayer extends React.Component<VideoPlayerProps, VideoPlayerState> {\n    static contextType = SearchContext;\n    private readonly WIDTH = 560;\n    private readonly HEIGHT = 315;\n    constructor(props: VideoPlayerProps) {\n        super(props);\n\n        this.state = {\n            embedId: \"\",\n            isIdValid: true\n        };\n\n        this.getEmbedId = this.getEmbedId.bind(this);\n    }\n\n    componentDidMount(): void {\n        this.context.addActionListener(\"videoPlayer\", this.getEmbedId);\n    }\n\n    // Valid link formats: \n    // https://www.youtube.com/watch?v=JzeZZ3IV27Q\n    // https://youtu.be/JzeZZ3IV27Q\n    // JzeZZ3IV27Q\n    async getEmbedId(searchStr: string): Promise<void> {\n        const regex = /^(https:\\/\\/www.youtube.com\\/watch\\?v=[a-zA-Z0-9]{11})|(https:\\/\\/youtu.be\\/[a-zA-Z0-9]{11})|([a-zA-Z0-9]{11})$/;\n        let embedId = \"\";\n\n        if (searchStr.match(regex))\n            embedId = searchStr.substring(searchStr.length - 11);\n\n        if (!embedId || embedId.length !== 11) {\n            this.setState({embedId: \"\", isIdValid: false});\n            return;\n        }\n\n        this.setState({embedId: embedId, isIdValid: true});\n    }\n\n    componentWillUnmount(): void {\n        this.context.removeActionListener(\"videoPlayer\");\n    }\n\n    render(): JSX.Element {\n        const { embedId, isIdValid } = this.state;\n\n        return (\n            <div className=\"flex w-full justify-center relative\">\n                <div className=\"absolute left-0 right-0 top-0 bottom-0 bg-gray-900 opacity-50\"></div>\n                {(!embedId && \n                    <div className=\"flex w-full justify-center z-10\">\n                        <div className=\"flex items-center justify-center bg-gray-900\" style={{width: this.WIDTH, height: this.HEIGHT}}>\n                            <span className=\"text-gray-400\">{`${isIdValid ? \"No video selected.\" : \"Invalid video url or id given.\"}`}</span>\n                        </div>\n                    </div>\n                ) || \n                (embedId &&\n                    <div className=\"z-10\">\n                        <iframe width={this.WIDTH}\n                            height={this.HEIGHT}\n                            src={`https://www.youtube.com/embed/${embedId}`}\n                            frameBorder=\"0\"\n                            allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                            allowFullScreen\n                            title=\"Youtube\" />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport Policies from \"../components/Policies\";\nimport PolicyState from \"../components/PolicyState\";\nimport ToggleTeam from \"../components/ToggleTeam\";\nimport TopBar from \"../components/TopBar\";\nimport VideoPlayer from \"../components/VideoPlayer\";\nimport { Team } from \"../models/Policies\";\nimport { AccuracyContext, SearchContext, TeamContext } from \"../utils/Context\";\nimport { Action } from \"../utils/Enums\";\n\ntype MainPageProps = {\n\n}\n\ntype MainPageState = {\n    team: Team;\n    searchStr: string;\n}\n\ntype TeamListener = {\n    name: string;\n    listener: (team: Team) => Promise<void>;\n}\n\ntype AccuracyListener = {\n    name: string;\n    listener: (accuracy: number) => Promise<void>;\n}\n\ntype SearchListener = {\n    name: string;\n    listener: (searchStr: string) => Promise<void>;\n}\n\nexport default class MainPage extends React.Component<MainPageProps, MainPageState> {\n    private teamListeners: TeamListener[] = [];\n    private accuracyListeners: AccuracyListener[] = [];\n    private searchListeners: SearchListener[] = [];\n    constructor(props: MainPageProps) {\n        super(props);\n\n        this.state = {\n            team: Team.Blue,\n            searchStr: \"\"\n        };\n\n        this.setTeam = this.setTeam.bind(this);\n        this.addTeamListener = this.addTeamListener.bind(this);\n        this.removeTeamListener = this.removeTeamListener.bind(this);\n\n        this.setAccuracy = this.setAccuracy.bind(this);\n        this.addAccuracyListener = this.addAccuracyListener.bind(this);\n        this.removeAccuracyListener = this.removeAccuracyListener.bind(this);\n\n        this.setSearchStr = this.setSearchStr.bind(this);\n        this.searchAction = this.searchAction.bind(this);\n        this.addSearchActionListener = this.addSearchActionListener.bind(this);\n        this.removeSearchActionListener = this.removeSearchActionListener.bind(this);\n    }\n\n    setTeam(team: Team): void {\n        this.setState({team: team}, async () => {\n            // run all listeners\n            await Promise.all(this.teamListeners.map(fn => fn.listener(team)));\n        });\n    }\n\n    addTeamListener(name: string, listener: (team: Team) => Promise<void>): void {\n        if (this.teamListeners.filter(listener => listener.name === name).length > 0)\n            return;\n        \n        this.teamListeners.push({name, listener});\n    }\n\n    removeTeamListener(name: string): void {\n        if (this.teamListeners.filter(listener => listener.name === name).length <= 0)\n            return;\n\n        this.teamListeners = this.teamListeners.filter(listener => listener.name !== name);\n    }\n\n    async setAccuracy(accuracy: number): Promise<void> {\n        await Promise.all(this.accuracyListeners.map(fn => fn.listener(accuracy)));\n    }\n\n    addAccuracyListener(name: string, listener: (accuracy: number) => Promise<void>): void {\n        if (this.accuracyListeners.filter(listener => listener.name === name).length > 0)\n            return;\n        \n        this.accuracyListeners.push({name, listener});\n    }\n\n    removeAccuracyListener(name: string): void {\n        if (this.accuracyListeners.filter(listener => listener.name === name).length <= 0)\n            return;\n\n        this.accuracyListeners = this.accuracyListeners.filter(listener => listener.name !== name);\n    }\n\n    setSearchStr(searchStr: string): void {\n        this.setState({searchStr: searchStr});\n    }\n\n    async searchAction(): Promise<void> {\n        const { searchStr } = this.state;\n        await Promise.all(this.searchListeners.map(fn => fn.listener(searchStr)));\n    }\n\n    addSearchActionListener(name: string, listener: (searchStr: string) => Promise<void>): void {\n        if (this.searchListeners.filter(listener => listener.name === name).length > 0)\n            return;\n\n        this.searchListeners.push({name, listener});\n    }\n\n    removeSearchActionListener(name: string): void {\n        if (this.searchListeners.filter(listener => listener.name === name).length <= 0)\n            return;\n\n        this.searchListeners = this.searchListeners.filter(listener => listener.name !== name);\n    }\n    \n    render(): JSX.Element {\n        const { team, searchStr } = this.state;\n        return (\n            <TeamContext.Provider value={{team: team, setTeam: this.setTeam, addListener: this.addTeamListener, removeListener: this.removeTeamListener}}>\n                <AccuracyContext.Provider value={{setAccuracy: this.setAccuracy, addListener: this.addAccuracyListener, removeListener: this.removeAccuracyListener}}>\n                    <SearchContext.Provider value={{searchStr: searchStr, setSearchStr: this.setSearchStr, searchAction: this.searchAction, addActionListener: this.addSearchActionListener, removeActionListener: this.removeSearchActionListener}}>\n                        <div className={`transition-default duration-500 ease-in-out flex flex-col w-screen h-screen ${team === Team.Blue ? \"bg-blue-300\" : \"bg-red-300\"}`}>\n                            <TopBar />\n                            <VideoPlayer />\n                            <Policies />\n                        </div>\n                    </SearchContext.Provider>\n                </AccuracyContext.Provider>\n            </TeamContext.Provider>\n        );\n    }\n}","import axios from \"axios\";\nimport { addListener } from \"process\";\nimport React from \"react\";\nimport LoginPage from \"./pages/LoginPage\";\nimport MainPage from \"./pages/MainPage\";\nimport Configuration from \"./utils/Configuration\";\nimport { AuthContext, BaseUrlContext } from \"./utils/Context\";\n\ntype AppProps = {\n\n}\n\ntype AppState = {\n    token: string;\n    baseUrl: string;\n}\n\ntype BaseUrlListener = {\n    name: string;\n    listener: (baseUrl: string) => Promise<void>;\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n    private baseUrlListeners: BaseUrlListener[] = [];\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = {\n            token: \"\",\n            baseUrl: Configuration.serverBaseUrl\n        };\n\n        this.setToken = this.setToken.bind(this);\n\n        this.setBaseUrl = this.setBaseUrl.bind(this);\n        this.addBaseUrlListener = this.addBaseUrlListener.bind(this);\n        this.removeBaseUrlListener = this.removeBaseUrlListener.bind(this);\n    }\n\n    async setToken(token: string): Promise<void> {\n        const { baseUrl } = this.state;\n\n        try {\n            const res = await axios.get(`${baseUrl}/auth/token`, {\n                headers: {\n                    \"X-Access-Tokens\": token\n                }\n            });\n            if (res.status === 200) {\n                if (res.data[\"message\"] === \"valid token\")\n                    this.setState({token: token});\n                else\n                    this.setState({token: \"\"});\n            }\n        } catch (err) {\n            alert(`${err.response.status}: ${err.response.data}`);\n        }\n    }\n\n    setBaseUrl(baseUrl: string): void {\n        this.setState({baseUrl: baseUrl}, async () => {\n            await Promise.all(this.baseUrlListeners.map(fn => fn.listener(baseUrl)));\n        });\n    }\n\n    addBaseUrlListener(name: string, listener: (baseUrl: string) => Promise<void>): void {\n        if (this.baseUrlListeners.filter(listener => listener.name === name).length > 0)\n            return;\n\n        this.baseUrlListeners.push({name, listener});\n    }\n\n    removeBaseUrlListener(name: string): void {\n        if (this.baseUrlListeners.filter(listener => listener.name === name).length <= 0)\n            return;\n\n        this.baseUrlListeners = this.baseUrlListeners.filter(listener => listener.name !== name);\n    }\n\n    render(): JSX.Element {\n        const { token, baseUrl } = this.state;\n        return (\n            <AuthContext.Provider value={{token: token, setToken: this.setToken}}>\n                <BaseUrlContext.Provider value={{baseUrl: baseUrl, setBaseUrl: this.setBaseUrl, addListener: this.addBaseUrlListener, removeListener: this.removeBaseUrlListener}}>\n                    <div className=\"App\">\n                        {(!token && \n                            <LoginPage />\n                        ) || \n                        (token &&\n                            <MainPage />\n                        )}\n                    </div>\n                </BaseUrlContext.Provider>\n            </AuthContext.Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./assets/main.css\";\nimport \"./assets/toggle.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}